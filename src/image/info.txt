// Importamos la librería xlsx
import XLSX from "xlsx";

// Creamos una función para leer el archivo y devolver un objeto JSON
function readExcelFile(file) {
  // Creamos un objeto FileReader para leer el archivo
  const reader = new FileReader();
  // Creamos una variable para guardar el resultado
  let result = {};
  // Usamos una promesa para esperar a que el archivo se lea
  return new Promise((resolve, reject) => {
    // Leemos el archivo como un array buffer
    reader.readAsArrayBuffer(file);
    // Cuando el archivo se haya leído
    reader.onload = function (e) {
      // Obtenemos el array buffer
      const buffer = e.target.result;
      // Convertimos el buffer en un libro de trabajo de Excel
      const workbook = XLSX.read(buffer, { type: "buffer" });
      // Obtenemos la primera hoja del libro de trabajo
      const worksheet = workbook.Sheets[workbook.SheetNames[0]];
      // Convertimos la hoja en un objeto JSON
      result = XLSX.utils.sheet_to_json(worksheet);
      // Resolvemos la promesa con el resultado
      resolve(result);
    };
    // Si hay algún error al leer el archivo, rechazamos la promesa
    reader.onerror = function (error) {
      reject(error);
    };
  });
}

// Supongamos que este es el array original con la lista de canciones
const songs = [
  {
    id: 1,
    title: "Imagine",
    artist: "John Lennon",
    duration: "3:04",
  },
  {
    id: 2,
    title: "Bohemian Rhapsody",
    artist: "Queen",
    duration: "5:55",
  },
  {
    id: 3,
    title: "Stairway to Heaven",
    artist: "Led Zeppelin",
    duration: "8:02",
  },
];

// Supongamos que este es el archivo con la nueva información que queremos reemplazar cada semana
const file = ...; // Aquí pondrías el archivo que obtienes del input

// Llamamos a la función para leer el archivo y obtener el objeto JSON
readExcelFile(file).then((newSongs) => {
  // Usamos el método map para crear un nuevo array con la información actualizada
  const updatedSongs = songs.map((song) => {
    // Buscamos el elemento con el mismo id en el objeto JSON
    const newSong = newSongs.find((newSong) => newSong.id === song.id);
    // Si lo encontramos, devolvemos ese elemento
    if (newSong) {
      return newSong;
    }
    // Si no lo encontramos, devolvemos el elemento original
    else {
      return song;
    }
  });

  // Usamos el método setState para cambiar el estado del componente que usa el array songs
  this.setState({
    songsState: updatedSongs,
  });
});








let file;
let url = "https://docs.google.com/spreadsheets/d/1I5x-unibuNLLSR4cpBR0P3Xckin69V_U5D24edy-Cl0/edit?usp=sharing";
// Usamos la función fetch para obtener el archivo desde la URL
fetch(url)
  .then((response) => {
    // Convertimos la respuesta en un objeto File
    return response.blob();
  })
  .then((blob) => {
    // Asignamos el objeto File a la variable file
    file = new File([blob], "nuevas_canciones.xlsx");
    // Llamamos a la función para leer el archivo
    this.readExcelFile(file);
  });
