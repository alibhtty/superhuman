// music-control-box.jsx
import { connect } from 'react-redux';
import { changeTrack } from '../../../actions';
import * as Icons from '../../icons';
import IconButton from '../../buttons/icon-button';
import PlayButton from '../../buttons/play-button';
import { useEffect, useRef } from 'react'; // No olvides importar useRef

import { PLAYLIST } from "../../../data/index";
import styles from "./music-control-box.module.css";

// Un array con las URLs de tus anuncios
const ADS = ['https://mix-tape.web.app/assets/audio/clicktape.mp32', 'https://mix-tape.web.app/assets/audio/mixtape.mp3'];

// Una variable para llevar la cuenta de las canciones reproducidas
let songsPlayed = 0;

function MusicControlBox(props){
    const audioRef = useRef(); // Crea una referencia al elemento de audio

    // Carga la canción y la posición de reproducción actuales del almacenamiento local cuando el componente se monta
    useEffect(() => {
        const savedSong = localStorage.getItem('currentSong');
        const savedTime = localStorage.getItem('currentTime');
        if (savedSong) {
            const { trackKey } = JSON.parse(savedSong);
            props.changeTrack(trackKey);
            const audioElement = audioRef.current;
            const setAudioTime = () => {
                audioElement.currentTime = savedTime || 0;
                audioElement.removeEventListener('canplaythrough', setAudioTime);
            };
            audioElement.addEventListener('canplaythrough', setAudioTime);
        }
    }, []);

    // Guarda la canción y la posición de reproducción actuales en el almacenamiento local cada vez que cambian
    useEffect(() => {
        localStorage.setItem('currentSong', JSON.stringify(props.trackData));
        localStorage.setItem('currentTime', audioRef.current.currentTime);
    }, [props.trackData]);

    // Agrega un manejador de eventos para el evento 'timeupdate'
    useEffect(() => {
        const audioElement = audioRef.current;
        audioElement.addEventListener('timeupdate', () => {
            localStorage.setItem('currentTime', audioElement.currentTime);
        });

        // Limpia el manejador de eventos cuando el componente se desmonta
        return () => {
            audioElement.removeEventListener('timeupdate', () => {
                localStorage.setItem('currentTime', audioElement.currentTime);
            });
        };
    }, []);

    // Agrega un manejador de eventos para el evento 'ended'
    useEffect(() => {
        const audioElement = audioRef.current;
        audioElement.addEventListener('ended', playAd);

        // Limpia el manejador de eventos cuando el componente se desmonta
        return () => {
            audioElement.removeEventListener('ended', playAd);
        };
    }, []);

    function playAd() {
        // Selecciona un anuncio al azar
        const adUrl = ADS[Math.floor(Math.random() * ADS.length)];

        // Reproduce el anuncio
        audioElement.src = adUrl;
        audioElement.play();

        // Quita el manejador del evento 'ended' para que el anuncio no se repita
        audioElement.removeEventListener('ended', playAd);

        // Añade un manejador de eventos para reproducir la siguiente canción cuando el anuncio termine
        audioElement.addEventListener('ended', increaseIndex);
    }

    // Actualiza los metadatos de la canción cada vez que cambia la canción
    useEffect(() => {
        if ('mediaSession' in navigator) {
            const { trackKey } = props.trackData;
            const song = PLAYLIST[trackKey[0]].playlistData[trackKey[1]];
            navigator.mediaSession.metadata = new MediaMetadata({
                title: song.songName,
                artist: song.songArtist,
                artwork: [{ src: song.songimg, type: 'image/jpeg' }] /*  sizes: '512x512' */
            });

            // Establece los manejadores de eventos para los botones de pista anterior y siguiente
            //navigator.mediaSession.setActionHandler('previoustrack', decreaseIndex);
            //navigator.mediaSession.setActionHandler('nexttrack', increaseIndex);
    
            // Añade manejadores de eventos para los botones de play y pausa
            //navigator.mediaSession.setActionHandler('play', function() { props.changePlay(true); });
            //navigator.mediaSession.setActionHandler('pause', function() { props.changePlay(false); });
        }
    }, [props.trackData, props.changePlay]);

    function decreaseIndex(){
        if(props.trackData.trackKey[1] == 0){ }else{
            props.changeTrack([props.trackData.trackKey[0], props.trackData.trackKey[1]-1])
        }
    }
    function increaseIndex(){
        if(props.trackData.trackKey[1] == (PLAYLIST[props.trackData.trackKey[0]].playlistData.length)-1){ }else{
            props.changeTrack([props.trackData.trackKey[0], parseInt(props.trackData.trackKey[1])+1])
        }
    }

    return (
        <div className={styles.musicControl}>
            {/* <IconButton icon={<Icons.Mix />} activeicon={<Icons.Mix />}/> */}
            <button
