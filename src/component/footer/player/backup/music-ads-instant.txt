import { connect } from 'react-redux';
import { changeTrack } from '../../../actions';
import * as Icons from '../../icons';
import IconButton from '../../buttons/icon-button';
import PlayButton from '../../buttons/play-button';
import { useEffect, useRef, useState } from 'react'; // Importa useState

import { PLAYLIST } from "../../../data/index";
import styles from "./music-control-box.module.css";

// Un array con las URLs de tus anuncios
const ADS = [ 'https://mix-tape.web.app/assets/audio/ad-salsa.mp3', 'https://mix-tape.web.app/assets/audio/ad-mixtape.mp3', 'https://mix-tape.web.app/assets/audio/ad-4b.mp3'];

// Una variable para llevar la cuenta de las canciones reproducidas
let songsPlayed = 0;

function MusicControlBox(props){
    const audioRef = useRef();
    const [isAdPlaying, setIsAdPlaying] = useState(false); // Añade una variable de estado para saber si se está reproduciendo un anuncio

    useEffect(() => {
        const savedSong = localStorage.getItem('currentSong');
        const savedTime = localStorage.getItem('currentTime');
        if (savedSong) {
            const { trackKey } = JSON.parse(savedSong);
            props.changeTrack(trackKey);
            const audioElement = audioRef.current;
            const setAudioTime = () => {
                audioElement.currentTime = savedTime || 0;
                audioElement.removeEventListener('canplaythrough', setAudioTime);
            };
            audioElement.addEventListener('canplaythrough', setAudioTime);
        }
    }, []);

    useEffect(() => {
        localStorage.setItem('currentSong', JSON.stringify(props.trackData));
        localStorage.setItem('currentTime', audioRef.current.currentTime);

        // Incrementa el contador de canciones reproducidas
        songsPlayed++;

        // Si se han reproducido 3 canciones, reproduce un anuncio
        if (songsPlayed % 3 === 0) {
            playAd();
        }
    }, [props.trackData]);

    useEffect(() => {
        const audioElement = audioRef.current;
        audioElement.addEventListener('timeupdate', () => {
            localStorage.setItem('currentTime', audioElement.currentTime);
        });

        return () => {
            audioElement.removeEventListener('timeupdate', () => {
                localStorage.setItem('currentTime', audioElement.currentTime);
            });
        };
    }, []);

    function playAd() {
        // Selecciona un anuncio al azar
        const adUrl = ADS[Math.floor(Math.random() * ADS.length)];
    
        // Obtiene una referencia al elemento de audio
        const audioElement = audioRef.current;
    
        // Carga el anuncio
        audioElement.src = adUrl;
    
        // Crea una promesa que se resuelve cuando el anuncio se puede reproducir completamente
        const canPlayThrough = new Promise((resolve) => {
            audioElement.oncanplaythrough = resolve;
        });
    
        // Reproduce el anuncio una vez que se puede reproducir completamente
        canPlayThrough.then(() => {
            audioElement.play();
            console.log('Playing ad:', adUrl);
        });
    }

    // INSTANTANEO - SIMULTANEO
    /* function playAd() {
        // Selecciona un anuncio al azar
        const adUrl = ADS[Math.floor(Math.random() * ADS.length)];
    
        // Obtiene una referencia al elemento de audio
        const audioElement = audioRef.current;
    
        // Carga el anuncio
        audioElement.src = adUrl;
    
        // Crea una promesa que se resuelve cuando el anuncio se puede reproducir completamente
        const canPlayThrough = new Promise((resolve) => {
            audioElement.oncanplaythrough = resolve;
        });
    
        // Reproduce el anuncio una vez que se puede reproducir completamente
        canPlayThrough.then(() => {
            audioElement.play();
            console.log('Playing ad:', adUrl);
        });
    } */



    // Añade un manejador de eventos para el evento 'ended' del anuncio
    useEffect(() => {
        const audioElement = audioRef.current;
        const onAdEnded = () => {
            setIsAdPlaying(false); // Establece isAdPlaying en false cuando el anuncio ha terminado
        };
        audioElement.addEventListener('ended', onAdEnded);

        return () => {
            audioElement.removeEventListener('ended', onAdEnded);
        };
    }, []);

    // Actualiza los metadatos de la canción cada vez que cambia la canción
    useEffect(() => {
        if ('mediaSession' in navigator) {
            const { trackKey } = props.trackData;
            const song = PLAYLIST[trackKey[0]].playlistData[trackKey[1]];
            navigator.mediaSession.metadata = new MediaMetadata({
                title: song.songName,
                artist: song.songArtist,
                artwork: [{ src: song.songimg, type: 'image/jpeg' }] /*  sizes: '512x512' */
            });
        }
    }, [props.trackData, props.changePlay]);

    function decreaseIndex(){
        if(props.trackData.trackKey[1] == 0){ }else{
            props.changeTrack([props.trackData.trackKey[0], props.trackData.trackKey[1]-1])
        }
    }
    function increaseIndex(){
        if(props.trackData.trackKey[1] == (PLAYLIST[props.trackData.trackKey[0]].playlistData.length)-1){ }else{
            props.changeTrack([props.trackData.trackKey[0], parseInt(props.trackData.trackKey[1])+1])
        }
    }

    return (
        <div className={styles.musicControl}>
            {/* <IconButton icon={<Icons.Mix />} activeicon={<Icons.Mix />}/> */}
            <button className={styles.button} onClick={decreaseIndex}>
                <Icons.Prev />
            </button>
            <PlayButton isthisplay={true}/>
            <button className={styles.button} onClick={increaseIndex}>
                <Icons.Next />
            </button>
            {/* <IconButton icon={<Icons.Loop />} activeicon={<Icons.Loop />}/> */}
            <audio ref={audioRef} src={props.trackData.track} /> {/* Asegúrate de que el elemento de audio está presente */}
        </div>
    );
}

const mapStateToProps = (state) => {
    return {
      trackData: state.trackData
    };
};
  
export default connect(mapStateToProps, { changeTrack })(MusicControlBox);
