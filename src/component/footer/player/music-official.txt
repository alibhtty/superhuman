import { connect } from 'react-redux';
import { changeTrack } from '../../../actions';
import * as Icons from '../../icons';
import IconButton from '../../buttons/icon-button';
import PlayButton from '../../buttons/play-button';
import { useEffect, useRef, useState } from 'react';

import { PLAYLIST } from "../../../data/index";
import styles from "./music-control-box.module.css";

const ADS = [ 'https://mix-tape.web.app/assets/audio/ad-salsa.mp3', 'https://mix-tape.web.app/assets/audio/ad-mixtape.mp3', 'https://mix-tape.web.app/assets/audio/ad-4b.mp3'];

let songsPlayed = 0;

function MusicControlBox(props){
    const audioRef = useRef();
    const [isAdPlaying, setIsAdPlaying] = useState(false);

    // Carga un archivo de audio en el buffer del audioSource
const loadAudio = async (url) => {
    const audioContext = new AudioContext();
    const audioSource = audioContext.createBufferSource();
    try {
        const response = await fetch(url);
        const arrayBuffer = await response.arrayBuffer();
        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
        audioSource.buffer = audioBuffer;
    } catch (error) {
        console.error('Error loading audio:', error);
    }
    return { audioContext, audioSource };
};


// Reproduce el audioSource actual
const playAudio = ({ audioContext, audioSource }) => {
    audioSource.connect(audioContext.destination);
    audioSource.start();
    audioSource.onended = () => {
        // Guarda la canción actual y el tiempo transcurrido en el almacenamiento local
        localStorage.setItem('currentSong', JSON.stringify(props.trackData));
        localStorage.setItem('currentTime', audioContext.currentTime);
    };
};

// Reproduce un anuncio
const playAd = async () => {
    if (!isAdPlaying) {
        const adUrl = ADS[Math.floor(Math.random() * ADS.length)];
        const response = await fetch(adUrl);
        if (!response.ok) {
            console.error('Ad not available:', adUrl);
            return;
        }
        const adAudio = await loadAudio(adUrl);
        playAudio(adAudio);
        setIsAdPlaying(true);
        console.log('Playing ad:', adUrl);
    }
};


// Cambia a la siguiente canción
const nextSong = async () => {
    const { trackKey } = props.trackData;
    const song = PLAYLIST[trackKey[0]].playlistData[trackKey[1]];
    const songAudio = await loadAudio(song.songUrl);
    playAudio(songAudio);
    setIsAdPlaying(false);
};

    // Actualiza los metadatos de la canción cada vez que cambia la canción
    useEffect(() => {
        if ('mediaSession' in navigator) {
            const { trackKey } = props.trackData;
            const song = PLAYLIST[trackKey[0]].playlistData[trackKey[1]];
            navigator.mediaSession.metadata = new MediaMetadata({
                title: song.songName,
                artist: song.songArtist,
                artwork: [{ src: song.songimg, type: 'image/jpeg' }] /*  sizes: '512x512' */
            });
        }
    }, [props.trackData, props.changePlay]);

    // Recupera la canción y el tiempo transcurrido del almacenamiento local
    useEffect(() => {
        const currentSong = JSON.parse(localStorage.getItem('currentSong'));
        const currentTime = localStorage.getItem('currentTime');
        if (currentSong && currentTime) {
            // Carga la canción y el tiempo transcurrido del almacenamiento local
            props.changeTrack(currentSong.trackKey);
            audioRef.current.currentTime = currentTime;
        }
    }, []);

    // Añade un manejador de eventos para el evento 'beforeunload'
    useEffect(() => {
        const handleBeforeUnload = () => {
            localStorage.setItem('currentSong', JSON.stringify(props.trackData));
            localStorage.setItem('currentTime', audioRef.current.currentTime);
        };

        window.addEventListener('beforeunload', handleBeforeUnload);

        return () => {
            window.removeEventListener('beforeunload', handleBeforeUnload);
        };
    }, [props.trackData]);

    function decreaseIndex(){
        if(props.trackData.trackKey[1] !== 0){
            props.changeTrack([props.trackData.trackKey[0], props.trackData.trackKey[1]-1])
        }
    }
    function increaseIndex(){
        if(props.trackData.trackKey[1] !== (PLAYLIST[props.trackData.trackKey[0]].playlistData.length)-1){
            props.changeTrack([props.trackData.trackKey[0], parseInt(props.trackData.trackKey[1])+1])
        }
    }

    return (
        <div className={styles.musicControl}>
            {/* <IconButton icon={<Icons.Mix />} activeicon={<Icons.Mix />}/> */}
            <button className={styles.button} onClick={decreaseIndex}>
                <Icons.Prev />
            </button>
            <PlayButton isthisplay={true}/>
            <button className={styles.button} onClick={increaseIndex}>
                <Icons.Next />
            </button>
            {/* <IconButton icon={<Icons.Loop />} activeicon={<Icons.Loop />}/> */}
            <audio ref={audioRef} src={props.trackData.track} /> {/* Asegúrate de que el elemento de audio está presente */}
        </div>
    );
}

const mapStateToProps = (state) => {
    return {
      trackData: state.trackData
    };
};
  
export default connect(mapStateToProps, { changeTrack })(MusicControlBox);
